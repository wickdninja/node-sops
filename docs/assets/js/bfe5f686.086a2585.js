"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[191],{3579:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"api/js","title":"JavaScript API","description":"This page documents the complete API for using Node SOPS programmatically in a JavaScript project.","source":"@site/src/docs/api/js.md","sourceDirName":"api","slug":"/api/js","permalink":"/node-sops/api/js","draft":false,"unlisted":false,"editUrl":"https://github.com/wickdninja/node-sops/edit/main/docs-src/src/docs/src/docs/api/js.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"JavaScript API"},"sidebar":"tutorialSidebar","previous":{"title":"CLI Reference","permalink":"/node-sops/api/cli"},"next":{"title":"TypeScript API","permalink":"/node-sops/api/ts"}}');var r=s(4848),i=s(8453);const c={sidebar_position:2,title:"JavaScript API"},o="JavaScript API Reference",l={},a=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Class: Sops",id:"class-sops",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Method: initialize",id:"method-initialize",level:4},{value:"Method: encrypt",id:"method-encrypt",level:4},{value:"Method: decrypt",id:"method-decrypt",level:4},{value:"Method: view",id:"method-view",level:4},{value:"Method: get",id:"method-get",level:4},{value:"Method: rotate",id:"method-rotate",level:4},{value:"Method: encryptContent",id:"method-encryptcontent",level:4},{value:"Method: decryptContent",id:"method-decryptcontent",level:4},{value:"Error Handling",id:"error-handling",level:2},{value:"Environment Variable Integration",id:"environment-variable-integration",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"javascript-api-reference",children:"JavaScript API Reference"})}),"\n",(0,r.jsx)(n.p,{children:"This page documents the complete API for using Node SOPS programmatically in a JavaScript project."}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install node-sops\n"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const { Sops } = require('node-sops');\n\n// Create a new instance\nconst sops = new Sops();\n\n// Initialize a new key (if not already created)\ntry {\n  sops.initialize();\n} catch (error) {\n  // Key already exists\n}\n\n// Encrypt a file\nsops.encrypt('secrets.yaml', 'secrets.enc.json');\n\n// Decrypt a file\nsops.decrypt('secrets.enc.json', 'secrets.yaml');\n\n// View decrypted content\nconst data = sops.view('secrets.enc.json');\nconsole.log(data);\n\n// Get a specific value\nconst apiKey = sops.get('secrets.enc.json', 'data.api.key');\nconsole.log(apiKey);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(n.h3,{id:"class-sops",children:"Class: Sops"}),"\n",(0,r.jsx)(n.p,{children:"The main class for interacting with Node SOPS functionality."}),"\n",(0,r.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const sops = new Sops(options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): Configuration options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Path to the encryption key file. Default: ",(0,r.jsx)(n.code,{children:".sops-key"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Using default key path\nconst defaultSops = new Sops();\n\n// Using custom key path\nconst customSops = new Sops({\n  keyPath: './config/custom-key'\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"method-initialize",children:"Method: initialize"}),"\n",(0,r.jsx)(n.p,{children:"Initializes a new encryption key."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"sops.initialize(options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): Initialization options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"force"})," (boolean, optional): Overwrite existing key if present. Default: ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Override the instance's keyPath for this operation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): The generated encryption key"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Throws:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Error if key already exists and ",(0,r.jsx)(n.code,{children:"force"})," is not ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"try {\n  const key = sops.initialize();\n  console.log('New key created:', key);\n} catch (error) {\n  console.error('Key already exists');\n}\n\n// Force create a new key\nconst newKey = sops.initialize({ force: true });\n"})}),"\n",(0,r.jsx)(n.h4,{id:"method-encrypt",children:"Method: encrypt"}),"\n",(0,r.jsx)(n.p,{children:"Encrypts a plaintext file containing secrets."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"sops.encrypt(inputPath, outputPath, options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputPath"})," (string): Path to the input file (YAML or JSON)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"outputPath"})," (string): Path where the encrypted file will be written"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): Encryption options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Override the instance's keyPath for this operation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Throws:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Error if input file cannot be read or output file cannot be written"}),"\n",(0,r.jsx)(n.li,{children:"Error if encryption fails"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Basic usage\nsops.encrypt('secrets.yaml', 'secrets.enc.json');\n\n// With custom key path for this operation\nsops.encrypt('secrets.yaml', 'secrets.enc.json', {\n  keyPath: './special-project-key'\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"method-decrypt",children:"Method: decrypt"}),"\n",(0,r.jsx)(n.p,{children:"Decrypts an encrypted file to its original plaintext form."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"sops.decrypt(inputPath, outputPath, options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputPath"})," (string): Path to the encrypted file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"outputPath"})," (string): Path where the decrypted file will be written"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): Decryption options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Override the instance's keyPath for this operation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"format"})," (string, optional): Force output format to 'yaml' or 'json'. Default: inferred from output file extension"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Throws:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Error if input file cannot be read or output file cannot be written"}),"\n",(0,r.jsx)(n.li,{children:"Error if decryption fails"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Basic usage\nsops.decrypt('secrets.enc.json', 'secrets.yaml');\n\n// Force YAML format regardless of extension\nsops.decrypt('secrets.enc.json', 'secrets.config', {\n  format: 'yaml'\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"method-view",children:"Method: view"}),"\n",(0,r.jsx)(n.p,{children:"Reads and decrypts an encrypted file, returning the contents as an object."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const data = sops.view(inputPath, options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputPath"})," (string): Path to the encrypted file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): View options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Override the instance's keyPath for this operation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Object): The decrypted content as a JavaScript object"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Throws:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Error if input file cannot be read"}),"\n",(0,r.jsx)(n.li,{children:"Error if decryption fails"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const secrets = sops.view('secrets.enc.json');\nconsole.log(secrets.data.api.key);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"method-get",children:"Method: get"}),"\n",(0,r.jsx)(n.p,{children:"Retrieves a specific value from an encrypted file using a dot-notation path."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const value = sops.get(inputPath, dotPath, options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputPath"})," (string): Path to the encrypted file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dotPath"})," (string): Dot-notation path to the value (e.g., 'data.api.key')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): Get options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Override the instance's keyPath for this operation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(any): The value at the specified path"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Throws:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Error if input file cannot be read"}),"\n",(0,r.jsx)(n.li,{children:"Error if decryption fails"}),"\n",(0,r.jsx)(n.li,{children:"Error if path does not exist in the decrypted content"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Get a specific value\nconst apiKey = sops.get('secrets.enc.json', 'data.api.key');\nconsole.log('API Key:', apiKey);\n\n// Get a nested value\nconst dbPassword = sops.get('secrets.enc.json', 'data.database.password');\n"})}),"\n",(0,r.jsx)(n.h4,{id:"method-rotate",children:"Method: rotate"}),"\n",(0,r.jsx)(n.p,{children:"Re-encrypts an encrypted file with a new initialization vector."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"sops.rotate(inputPath, outputPath, options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputPath"})," (string): Path to the encrypted file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"outputPath"})," (string, optional): Path where the re-encrypted file will be written. Default: same as inputPath"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): Rotate options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Override the instance's keyPath for this operation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Throws:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Error if input file cannot be read or output file cannot be written"}),"\n",(0,r.jsx)(n.li,{children:"Error if decryption or re-encryption fails"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Rotate in place (overwrites the original file)\nsops.rotate('secrets.enc.json');\n\n// Rotate to a new file\nsops.rotate('secrets.enc.json', 'rotated-secrets.enc.json');\n"})}),"\n",(0,r.jsx)(n.h4,{id:"method-encryptcontent",children:"Method: encryptContent"}),"\n",(0,r.jsx)(n.p,{children:"Encrypts a JavaScript object directly without reading from or writing to files."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const encrypted = sops.encryptContent(content, options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"})," (Object): The data to encrypt"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): Encryption options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Override the instance's keyPath for this operation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(Object): An object containing the encrypted content and metadata","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"iv"})," (string): Base64-encoded initialization vector"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"})," (string): Base64-encoded encrypted content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," (Object): Encryption metadata","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"encryptedAt"})," (string): ISO date string when the content was encrypted"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version"})," (string): Schema version"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Throws:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Error if encryption fails or key cannot be read"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const plainContent = {\n  api: {\n    key: 'secret_value'\n  }\n};\n\nconst encrypted = sops.encryptContent(plainContent);\nconsole.log(encrypted);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"method-decryptcontent",children:"Method: decryptContent"}),"\n",(0,r.jsx)(n.p,{children:"Decrypts an encrypted content object directly without reading from or writing to files."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const decrypted = sops.decryptContent(encryptedContent, options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"encryptedContent"})," (Object): The encrypted content object (as returned by ",(0,r.jsx)(n.code,{children:"encryptContent"}),")","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"iv"})," (string): Base64-encoded initialization vector"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"})," (string): Base64-encoded encrypted content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," (Object): Encryption metadata"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (Object, optional): Decryption options","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keyPath"})," (string, optional): Override the instance's keyPath for this operation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Object): The decrypted content as a JavaScript object"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Throws:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Error if decryption fails or key cannot be read"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// First encrypt some content\nconst plainContent = { secret: 'value' };\nconst encrypted = sops.encryptContent(plainContent);\n\n// Later decrypt it\nconst decrypted = sops.decryptContent(encrypted);\nconsole.log(decrypted); // { secret: 'value' }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"All methods can throw errors if operations fail. It's recommended to use try/catch blocks when calling methods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"try {\n  const secrets = sops.view('secrets.enc.json');\n  // Use the secrets...\n} catch (error) {\n  console.error('Failed to read secrets:', error.message);\n  // Handle the error appropriately\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"environment-variable-integration",children:"Environment Variable Integration"}),"\n",(0,r.jsx)(n.p,{children:"A common pattern is to load secrets into environment variables during application startup:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const { Sops } = require('node-sops');\n\nfunction loadSecrets() {\n  try {\n    const sops = new Sops();\n    const secrets = sops.view('secrets.enc.json');\n    \n    // Add secrets to process.env\n    Object.entries(secrets.data).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        process.env[key.toUpperCase()] = value;\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([subKey, subValue]) => {\n          if (typeof subValue === 'string') {\n            process.env[`${key.toUpperCase()}_${subKey.toUpperCase()}`] = subValue;\n          }\n        });\n      }\n    });\n    \n    console.log('Secrets loaded successfully');\n  } catch (error) {\n    console.error('Failed to load secrets:', error.message);\n    process.exit(1); // Exit if secrets cannot be loaded\n  }\n}\n\n// Call early in your application bootstrap\nloadSecrets();\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);